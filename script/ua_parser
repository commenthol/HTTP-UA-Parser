#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;
use LWP::UserAgent;

use Data::Dumper;
use File::Copy;
use HTTP::UA::Parser;

my ($help,$update,@parse);

GetOptions(
    "h|help"     => \$help,
    "u|update"   => \$update,
    "p|parse=s"  => \@parse,
) or help();

#@parse = split(/,/,join(',',@parse));

update() if $update;
parse() if @parse;
help() if $help;

sub help {
    print "\nUSAGE\n";
    print "=================================================\n\n";
    print "% ua_parser -u\n";
    print "  Update regexes.yaml file \n\n";
    print "% ua_parser -p \"some user agent\"\n";
    print "  Parses user agent and print back the results\n";
}

sub update {
    my $PATH = HTTP::UA::Parser::Utils::getPath();
    print "Fetching Regex file from server...\n";
    my $content = send_http_request('https://raw.github.com/tobie/ua-parser/master/regexes.yaml');
    my $temp = $PATH.'/temp_regexes.yaml';
    my $old = $PATH.'/regexes.yaml';
    open my $file,'>',$temp or die "can't open create file tmp $!";
    print $file $content;
    close $file;
    unlink $old;
    rename $temp, $old;
    print "File updated successfully\n";
}


sub send_http_request {
    my $url = shift;
    my $ua = LWP::UserAgent->new;
    $ua->timeout(5);
    $ua->env_proxy();
    my $response = $ua->get($url);
    if ($response->is_success) {
        return $response->content;
    }
    else {
        print "Request aborted\n";
        exit;
    }
}

sub parse {
    my $PARSER = HTTP::UA::Parser->new();
    #print Dumper @parse;
    print "\n";
    for (@parse){
        my $u = $PARSER->parse($_);
        stringify($u->ua,'Browser');
        stringify($u->os,'OS');
        stringify($u->device,'Device');
    }
}

sub stringify {
    my $hash = shift;
    my $name = shift;
    while (my ($key,$val) = each %{$hash}){
        $val = '' if !$val;
        my $ss = $name . " " . $key;
        $ss .= ' ' x (16 - length($ss));
        print $ss . ' : ' . $val . "\n";
    }
}



